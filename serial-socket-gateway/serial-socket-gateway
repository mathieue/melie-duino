#!/usr/bin/env ruby
require 'rubygems'
gem 'serialport','>=1.0.4'
require 'serialport'
require 'eventmachine'
require 'ArgsParser'

parser = ArgsParser.parser
parser.bind(:help, :h, 'show help')
parser.comment(:bps, 'bit per second', 9600)
parser.comment(:bit, 'bit(7-9)', 8)
parser.comment(:stopbit, 'stopbit', 1)
parser.comment(:parity, 'parity bit', 0)
parser.comment(:port, 'TCP Port', 8782)
serial_device, params = parser.parse(ARGV)

if !serial_device or parser.has_option(:help)
  puts parser.help
  if RUBY_PLATFORM =~ /mswin|mingw|cygwin|bccwin/
    puts 'e.g. serial-socket-gateway COM1'
  else
    puts 'e.g. serial-socket-gateway /dev/tty.your-device'
  end
  exit 1
end

begin
  @@sp = SerialPort.new(serial_device, params[:bps].to_i, params[:bit].to_i, params[:stopbit].to_i, params[:parity].to_i)
rescue => e
  STDERR.puts 'cannot open serialport!!'
  STDERR.puts e
  exit 1
end

@@channel = EM::Channel.new

class SerialServer < EM::Connection
  def post_init
    @sid = @@channel.subscribe{|data|
      send_data "#{data}\n"
    }
    puts "new client <#{@sid}>"
  end

  def receive_data data
    return if data.strip.size < 1
    puts "<#{@sid}> #{data}"
    @@sp.puts data
  end

  def unbind
    puts "close <#{@sid}>"
    @@channel.unsubscribe @sid
  end
end

EM::run do
  EM::start_server("0.0.0.0", params[:port].to_i, SerialServer)
  puts "starting server.."
  puts " => port #{params[:port].to_i}"

  EM::defer do
    loop do
      puts data = @@sp.gets.gsub(/[\r\n]/, '')
      next if !data or data.to_s.size < 1
      @@channel.push data
    end
  end

  EM::defer do
    loop do
      line = gets.gsub(/[\r\n]/, '')
      next if !line or line.to_s.size < 1
      @@sp.puts line
    end
  end
end
